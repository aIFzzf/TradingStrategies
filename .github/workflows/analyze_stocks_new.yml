name: 分析股票趋势

on:
  schedule:
    - cron: '0 0 * * *'  # 每天 UTC 时间 00:00 运行
  workflow_dispatch:  # 允许手动触发

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install backtesting

      - name: 创建必要的目录结构
        run: |
          mkdir -p data/analysis
          mkdir -p data/json
          mkdir -p reports

      - name: 准备数据文件
        run: |
          # 创建空的分析文件，如果流程失败可以继续执行后续步骤
          touch data/analysis/nasdaq100_analysis.csv
          touch data/analysis/hstech50_analysis.csv
          
          # 创建基本的JSON文件结构
          echo '{"symbols": []}' > data/json/nasdaq100_symbols.json
          echo '{"symbols": []}' > data/json/hstech50_symbols.json

      - name: 获取最新股票数据
        run: |
          # 获取纳斯达克100指数成分股数据
          python scripts/analysis/get_nasdaq_top100.py
          
          # 获取恒生科技50指数成分股数据
          python scripts/analysis/get_hstech50.py
          
          # 批量分析股票数据
          python scripts/analysis/batch_analyze_stocks.py --index nasdaq100 --output data/analysis/nasdaq100_analysis.csv
          python scripts/analysis/batch_analyze_stocks.py --index hstech50 --output data/analysis/hstech50_analysis.csv
          
          # 显示分析结果摘要
          echo "纳斯达克100分析结果:"
          head -n 5 data/analysis/nasdaq100_analysis.csv
          
          echo "恒生科技50分析结果:"
          head -n 5 data/analysis/hstech50_analysis.csv

      - name: 生成分析报表
        run: |
          # 使用run_strategy.py生成报表
          python run_strategy.py --strategy index_analysis --index all --auto_report

      - name: 配置邮件发送环境
        env:
          EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          EMAIL_RECIPIENTS: ${{ secrets.EMAIL_RECIPIENTS }}
        run: |
          # 创建.env文件
          echo "EMAIL_SENDER=$EMAIL_SENDER" > .env
          echo "EMAIL_PASSWORD=$EMAIL_PASSWORD" >> .env
          echo "SMTP_SERVER=$SMTP_SERVER" >> .env
          echo "SMTP_PORT=$SMTP_PORT" >> .env
          echo "EMAIL_RECIPIENTS=$EMAIL_RECIPIENTS" >> .env

      - name: 发送分析报表邮件
        run: |
          # 使用run_strategy.py发送邮件
          python run_strategy.py --strategy index_analysis --index all --send_email

      # - name: 提交分析结果
      #   run: |
      #     # 配置Git
      #     git config --local user.email "github-actions[bot]@users.noreply.github.com"
      #     git config --local user.name "github-actions[bot]"
          
      #     # 创建输出目录（如果不存在）
      #     mkdir -p data/analysis data/json reports
          
      #     # 添加分析数据和JSON文件
      #     for file in data/analysis/nasdaq100_analysis.csv data/analysis/hstech50_analysis.csv data/json/nasdaq100_symbols.json data/json/hstech50_symbols.json; do
      #       if [ -f "$file" ]; then
      #         git add "$file"
      #       fi
      #     done
          
      #     # 添加所有报表HTML文件
      #     find reports -name "*.html" -type f -exec git add {} \;
          
      #     # 尝试提交更改
      #     if git diff --staged --quiet; then
      #       echo "没有变更需要提交"
      #     else
      #       git commit -m "更新股票分析结果 $(date +'%Y-%m-%d')"
            
      #       # 使用GITHUB_TOKEN推送更改
      #       git push https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}
      #     fi
